// Created by Michael David Pascual
// Function to determie possible direction(s) that the generator can go
// RIGHTCHECK in data section is to check if the current pos cannot go right and vice versa to LEFTCHECK
// Despite the length of the code, this is basically a jumping code to determine the correct output
// to be used by SETDIRECTIONS

.section .text

.globl	CHKDIRECTIONS

CHKDIRECTIONS:
	MOV	R1, #49		// 70 BEFORE
	CMP	R5, R1
	BLT	C3		// CANNOT GO UP
	MOV 	R2, #34		// 2 ROWS OFFSET 70
	SUB 	R3, R2		// 2 ROWS UP
	LDRB 	R3, [R3]
	CMP 	R3, #3		// COMPARE IF FLOOR/KEY/START.
	BLT 	C1		// UP IS OK

C3:				// UP IS NOT POSSIBLE
	MOV	R1, #239	//#237 BEFORE
	MOV 	R2, #34		// 2 ROWS OFFSET 70
	CMP	R5, R1
	BGT	C4		// CANNOT GO DOWN
	MOV 	R3, R4		// TEMP VALUE FOR R4
	ADD 	R3, R5		// R3 = CURRENT POS ADDRESS
	ADD	R3, R2		// 2 ROWS DOWN
	LDRB 	R3, [R3]
	CMP	R3, #3
	BLT	C2		//DOWN IS OK

C4:				// UP AND DOWN NOT POSSIBLE
	// CHECK IF POSITION CANNOT GO RIGHT

	MOV 	R3, R4		// TEMP VALUE FOR R4
	ADD 	R3, R5		// R3 = CURRENT POS ADDRESS
	PUSH	{R0, R1, R2}
	MOV	R0, #30
	MOV	R2, #0		// BYTE OFFSET

C4LOOP:
	CMP	R0, #0		// LOOP COUNTER
	BEQ	C4CONT
	LDR	R1, =RIGHTCHECK
	ADD	R1, R2
	LDRH	R1, [R1]
	CMP	R5, R1
	BEQ	C7		// CANNOT GO RIGHT
	SUB	R0, #1
	ADD	R2, #2
	B	C4LOOP
	
	
C4CONT:
	POP	{R0, R1, R2}
	MOV	R2, #2
	ADD	R3, R2		// 2 CELLS RIGHT
	LDRB 	R3, [R3]
	CMP	R3, #3
	BLT	C6		// RIGHT IS OK
	PUSH	{R0,R1,R2}

C7:				// UP, DOWN AND RIGHT NOT POSSIBLE
	POP	{R0, R1, R2}

	MOV 	R3, R4		// TEMP VALUE FOR R4
	ADD 	R3, R5		// R3 = CURRENT POS ADDRESS
	PUSH	{R0, R1, R2}
	MOV	R0, #30
	MOV	R2, #0		// BYTE OFFSET

C7LOOP:
	CMP	R0, #0		// LOOP COUNTER
	BEQ	C7CONT
	LDR	R1, =LEFTCHECK
	ADD	R1, R2
	LDRH	R1, [R1]
	CMP	R5, R1
	BEQ	C8		// CANNOT GO LEFT
	SUB	R0, #1
	ADD	R2, #2
	B	C7LOOP

C7CONT:
	POP	{R0, R1, R2}
	MOV	R2, #2
	SUB	R3, R2		// 2 CELLS LEFT
	LDRB 	R3, [R3]
	CMP	R3, #3
	BLT	C9		// LEFT IS OK
	PUSH	{R0, R1, R2}
	B	C8		// NO DIRECTION

	
	

C5:				
	// UP, DOWN AND RIGHT NOT POSSIBLE
	
	

C1:
	// UP IS OK
	MOV	R1, #239	//#237 BEFORE
	CMP	R5, R1
	BGT	C25		// CANNOT GO DOWN; C4 BEFORE
	MOV 	R3, R4		// TEMP VALUE FOR R4
	ADD 	R3, R5		// R3 = CURRENT POS ADDRESS
	ADD	R3, R2		// 2 ROWS DOWN
	LDRB 	R3, [R3]
	CMP	R3, #3
	BLT	C10		//UP AND DOWN IS OK

C25:
	// UP IS OK
	// DOWN IS EXCLUDED
	MOV 	R3, R4		// TEMP VALUE FOR R4
	ADD 	R3, R5		// R3 = CURRENT POS ADDRESS
	PUSH	{R0, R1, R2}
	MOV	R0, #30
	MOV	R2, #0		// BYTE OFFSET

C25LOOP:
	CMP	R0, #0		// LOOP COUNTER
	BEQ	C25CONT
	LDR	R1, =RIGHTCHECK
	ADD	R1, R2
	LDRH	R1, [R1]
	CMP	R5, R1
	BEQ	C26		// CANNOT GO RIGHT
	SUB	R0, #1
	ADD	R2, #2
	B	C25LOOP
	
	
C25CONT:
	POP	{R0, R1, R2}
	MOV	R2, #2
	ADD	R3, R2		// 2 CELLS RIGHT
	LDRB 	R3, [R3]
	CMP	R3, #3
	BLT	C27		// RIGHT IS OK
	PUSH	{R0,R1,R2}

C26:
	// UP EXLCLUDING RIGHT AND DOWN
	POP	{R0,R1,R2}

	MOV 	R3, R4		// TEMP VALUE FOR R4
	ADD 	R3, R5		// R3 = CURRENT POS ADDRESS
	PUSH	{R0, R1, R2}
	MOV	R0, #30
	MOV	R2, #0		// BYTE OFFSET

C26LOOP:
	CMP	R0, #0		// LOOP COUNTER
	BEQ	C26CONT
	LDR	R1, =LEFTCHECK
	ADD	R1, R2
	LDRH	R1, [R1]
	CMP	R5, R1
	BEQ	C28		// CANNOT GO LEFT
	SUB	R0, #1
	ADD	R2, #2
	B	C26LOOP

C26CONT:
	POP	{R0, R1, R2}
	MOV	R2, #2
	SUB	R3, R2		// 2 CELLS LEFT
	LDRB 	R3, [R3]
	CMP	R3, #3
	BLT	C29		// UP AND LEFT IS OK
	PUSH	{R0, R1, R2}
	B	C28		// UP ONLY

C27:
	// UP AND RIGHT EXCLUDING DOWN

	MOV 	R3, R4		// TEMP VALUE FOR R4
	ADD 	R3, R5		// R3 = CURRENT POS ADDRESS
	PUSH	{R0, R1, R2}
	MOV	R0, #30
	MOV	R2, #0		// BYTE OFFSET

C27LOOP:
	CMP	R0, #0		// LOOP COUNTER
	BEQ	C27CONT
	LDR	R1, =LEFTCHECK
	ADD	R1, R2
	LDRH	R1, [R1]
	CMP	R5, R1
	BEQ	C30		// CANNOT GO LEFT
	SUB	R0, #1
	ADD	R2, #2
	B	C27LOOP

C27CONT:
	POP	{R0, R1, R2}
	MOV	R2, #2
	SUB	R3, R2		// 2 CELLS LEFT
	LDRB 	R3, [R3]
	CMP	R3, #3
	BLT	C31		// LEFT IS OK
	PUSH	{R0, R1, R2}
	B	C30		// UP AND RIGHT ONLY
	


C2:
	// DOWN IS OK
	// UP IS EXCLUDED
	MOV 	R3, R4		// TEMP VALUE FOR R4
	ADD 	R3, R5		// R3 = CURRENT POS ADDRESS
	PUSH	{R0, R1, R2}
	MOV	R0, #30
	MOV	R2, #0		// BYTE OFFSET

C2LOOP:
	CMP	R0, #0		// LOOP COUNTER
	BEQ	C2CONT
	LDR	R1, =RIGHTCHECK
	ADD	R1, R2
	LDRH	R1, [R1]
	CMP	R5, R1
	BEQ	C18		// CANNOT GO RIGHT
	SUB	R0, #1
	ADD	R2, #2
	B	C2LOOP
	
	
C2CONT:
	POP	{R0, R1, R2}
	MOV	R2, #2
	ADD	R3, R2		// 2 CELLS RIGHT
	LDRB 	R3, [R3]
	CMP	R3, #3
	BLT	C21		// DOWN AND RIGHT IS OK
	PUSH	{R0,R1,R2}

C18:				// DOWN IS POSSIBLE BUT UP AND RIGHT NOT POSSIBLE
	POP	{R0, R1, R2}

	MOV 	R3, R4		// TEMP VALUE FOR R4
	ADD 	R3, R5		// R3 = CURRENT POS ADDRESS
	PUSH	{R0, R1, R2}
	MOV	R0, #30
	MOV	R2, #0		// BYTE OFFSET

C18LOOP:
	CMP	R0, #0		// LOOP COUNTER
	BEQ	C18CONT
	LDR	R1, =LEFTCHECK
	ADD	R1, R2
	LDRH	R1, [R1]
	CMP	R5, R1
	BEQ	C20		// CANNOT GO LEFT
	SUB	R0, #1
	ADD	R2, #2
	B	C18LOOP

C18CONT:
	POP	{R0, R1, R2}
	MOV	R2, #2
	SUB	R3, R2		// 2 CELLS LEFT
	LDRB 	R3, [R3]
	CMP	R3, #3
	BLT	C19		// LEFT IS OK
	PUSH	{R0,R1,R2}
	B	C20		// DOWN ONLY

C21:
	// DOWN AND RIGHT IS OK
	MOV 	R3, R4		// TEMP VALUE FOR R4
	ADD 	R3, R5		// R3 = CURRENT POS ADDRESS
	PUSH	{R0, R1, R2}
	MOV	R0, #30
	MOV	R2, #0		// BYTE OFFSET

C21LOOP:
	CMP	R0, #0		// LOOP COUNTER
	BEQ	C21CONT
	LDR	R1, =LEFTCHECK
	ADD	R1, R2
	LDRH	R1, [R1]
	CMP	R5, R1
	BEQ	C22		// CANNOT GO LEFT
	SUB	R0, #1
	ADD	R2, #2
	B	C21LOOP

C21CONT:
	POP	{R0, R1, R2}
	MOV	R2, #2
	SUB	R3, R2		// 2 CELLS LEFT
	LDRB 	R3, [R3]
	CMP	R3, #3
	BLT	C23		// LEFT IS OK
	PUSH	{R0, R1, R2}
	B	C22		// DOWN AND RIGHT ONLY

	

C6:
	// RIGHT IS OK, UP AND DOWN EXCLUDED

	MOV 	R3, R4		// TEMP VALUE FOR R4
	ADD 	R3, R5		// R3 = CURRENT POS ADDRESS
	PUSH	{R0, R1, R2}
	MOV	R0, #30
	MOV	R2, #0		// BYTE OFFSET

C6LOOP:
	CMP	R0, #0		// LOOP COUNTER
	BEQ	C6CONT
	LDR	R1, =LEFTCHECK
	ADD	R1, R2
	LDRH	R1, [R1]
	CMP	R5, R1
	BEQ	C24		// CANNOT GO LEFT
	SUB	R0, #1
	ADD	R2, #2
	B	C6LOOP

C6CONT:
	POP	{R0, R1, R2}
	MOV	R2, #2
	SUB	R3, R2		// 2 CELLS LEFT
	LDRB 	R3, [R3]
	CMP	R3, #3
	BLT	C17		// LEFT IS OK
	PUSH	{R0, R1, R2}
	B	C24		// RIGHT ONLY
C8:
	// NO DIRECTION
	POP	{R0, R1, R2}
	MOV	R1, #0
	BX LR

C9:
	// LEFT ONLY
	MOV	R1, #2
	BX LR

C10:
	// UP AND DOWN IS OK
	MOV 	R3, R4		// TEMP VALUE FOR R4
	ADD 	R3, R5		// R3 = CURRENT POS ADDRESS
	PUSH	{R0, R1, R2}
	MOV	R0, #30
	MOV	R2, #0		// BYTE OFFSET

C10LOOP:
	CMP	R0, #0		// LOOP COUNTER
	BEQ	C10CONT
	LDR	R1, =RIGHTCHECK
	ADD	R1, R2
	LDRH	R1, [R1]
	CMP	R5, R1
	BEQ	C11		// UP AND DOWN BUT CANNOT GO RIGHT
	SUB	R0, #1
	ADD	R2, #2
	B	C10LOOP
	
	
C10CONT:
	POP	{R0, R1, R2}
	MOV	R2, #2
	ADD	R3, R2		// 2 CELLS RIGHT
	LDRB 	R3, [R3]
	CMP	R3, #3
	BLT	C12		// UP AND DOWN AND RIGHT IS OK
	PUSH	{R0,R1,R2}

C11:
	// UP AND DOWN BUT CANNOT GO RIGHT
	POP	{R0, R1, R2}

	MOV 	R3, R4		// TEMP VALUE FOR R4
	ADD 	R3, R5		// R3 = CURRENT POS ADDRESS
	PUSH	{R0, R1, R2}
	MOV	R0, #30
	MOV	R2, #0		// BYTE OFFSET

C11LOOP:
	CMP	R0, #0		// LOOP COUNTER
	BEQ	C11CONT
	LDR	R1, =LEFTCHECK
	ADD	R1, R2
	LDRH	R1, [R1]
	CMP	R5, R1
	BEQ	C15		// CANNOT GO LEFT
	SUB	R0, #1
	ADD	R2, #2
	B	C11LOOP

C11CONT:
	POP	{R0, R1, R2}
	MOV	R2, #2
	SUB	R3, R2		// 2 CELLS LEFT
	LDRB 	R3, [R3]
	CMP	R3, #3
	BLT	C16		// UP AND DOWN AND LEFT
	PUSH	{R0, R1, R2}
	B	C15		// UP AND DOWN ONLY

C12:
	// UP AND DOWN AND RIGHT IS OK

	MOV 	R3, R4		// TEMP VALUE FOR R4
	ADD 	R3, R5		// R3 = CURRENT POS ADDRESS
	PUSH	{R0, R1, R2}
	MOV	R0, #30
	MOV	R2, #0		// BYTE OFFSET

C12LOOP:
	CMP	R0, #0		// LOOP COUNTER
	BEQ	C12CONT
	LDR	R1, =LEFTCHECK
	ADD	R1, R2
	LDRH	R1, [R1]
	CMP	R5, R1
	BEQ	C14		// CANNOT GO LEFT
	SUB	R0, #1
	ADD	R2, #2
	B	C12LOOP

C12CONT:
	POP	{R0, R1, R2}
	MOV	R2, #2
	SUB	R3, R2		// 2 CELLS LEFT
	LDRB 	R3, [R3]
	CMP	R3, #3
	BLT	C13		// ALL DIRECTIONS ARE OK
	PUSH	{R0, R1, R2}
	B	C14		// CANNOT GO LEFT

C13:
	// ALL DIRECTIONS
	MOV	R1, #15
	BX	LR

C14:
	POP	{R0, R1, R2}
	// ALL EXCEPT LEFT
	MOV	R1, #13
	BX	LR

C15:
	POP	{R0, R1, R2}
	// UP AND DOWN
	MOV	R1, #8
	BX	LR

C16:
	// UP AND DOWN AND LEFT
	MOV	R1, #14
	BX	LR

C17:
	// LEFT AND RIGHT IS OK
	MOV	R1, #5
	BX	LR

C19:
	// DOWN AND LEFT IS OK
	MOV	R1, #7
	BX	LR

C20:
	// DOWN ONLY
	POP	{R0,R1,R2}
	MOV	R1, #4
	BX	LR

C22:
	// DOWN AND RIGHT
	POP	{R0,R1,R2}
	MOV	R1, #6
	BX	LR

C23:
	// DOWN AND LEFT AND RIGHT
	MOV	R1, #12
	BX	LR

C24:
	POP	{R0, R1, R2}
	// RIGHT ONLY
	MOV	R1, #3
	BX	LR

C28:
	POP	{R0,R1,R2}
	// UP ONLY
	MOV	R1, #1
	BX	LR

C29:
	// UP AND LEFT
	MOV	R1, #10
	BX	LR

C30:
	POP	{R0,R1,R2}
	// UP AND RIGHT
	MOV	R1, #9
	BX	LR

C31:
	// UP AND RIGHT AND LEFT
	MOV	R1, #11
	BX	LR

.section .data

RIGHTCHECK:
	.hword	31,32,48,49,65,66,82,83,99,100,116,117,133,134,150,151,167,168,184,185,201,202,218,219,235,236,252,253,269,270

.align 2

LEFTCHECK:
	.hword	18,19,35,36,52,53,69,70,86,87,103,104,120,121,137,138,154,155,171,172,188,189,205,206,222,223,239,240,256,257


